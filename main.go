package main

import (
	"fmt"
	"os/exec"
	"time"
	"strings"
)

func main() {

	updateSubmodule()
	currentYear := fmt.Sprint(time.Now().Year())
	getCVEs(currentYear)
}

func updateSubmodule() bool {
	cmd := exec.Command("git", "submodule", "update")
	stdout, err := cmd.Output()

	if err != nil {
		fmt.Println(err)
	}

	output := string(stdout)

	if output != "" {
		fmt.Println(output)
		return false
	}

	return true
}

func ls(path string) string {
	ls := exec.Command("ls", path)
	stdout, err := ls.Output()

	if err != nil {
		fmt.Println(err)
	}

	output := string(stdout)
	return output
}

func getCVEs(year string) {
	cveVariantsPath := fmt.Sprintf("cvelistV5/cves/%s/", year)
	output := ls(cveVariantsPath)
	cveVariants := strings.Split(output, "\n")
	var categories []string

	for _, variant := range cveVariants {
		newPath := fmt.Sprintf("%s%s", cveVariantsPath, variant)

		if !strings.HasSuffix(newPath, "/") {
			categories = append(categories, newPath)
		}
	}

	var cves = make(map[int]string)

	for i, variant := range categories {
		catHolder := ls(variant)
		cves[i] = catHolder
	}

	// TODO: iterate over each mapped CVE class, read each reported CVE, check for details and do something with it
}
